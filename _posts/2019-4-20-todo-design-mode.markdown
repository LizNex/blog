---
layout: post
title: "设计模式"
subtitle: ""
date: 2019-04-15 12:00:00
author: "左手喝水"
header-img: "img/post-bg-2015.jpg"
tags:
  - 内功
---

> “站在巨人的肩上写代码”

## 前言
- 本文中设计模式的学习是通过《javascript设计模式与实践》一书，所以也算是这本书的读书笔记
- 相关设计模式实践仓库：https://github.com/LizNex/design-Mode


## 第一章 面向对象的javascript

### 1.1 动态类型语言和鸭子类型


静态类型：
- 优点：编译器事先知道变量的类型是什么，可以提交校验代码。其次事先知道类型编译器还可以做代码优化。
- 缺点：增加更多的代码量，开发人员会把一部分精力放在声明类型上。不像动态类型完全关注业务逻辑就好。

动态类型：
- 优点：代码量少，代码越少越容易阅读，开发人员可以把更多的精力放在逻辑表达上。
- 缺点：无法保证变量类型，运行过程中可能会出相关的错误，这好像在商店买了一包牛肉辣条，但是要真正吃到嘴里才知道是不是牛肉味。

javascript建立在鸭子模型的基础之上，鸭子模型就是
> 鸭子类型的通俗说法是:“如果它走起 路来像鸭子，叫起来也是鸭子，那么它就是鸭子。”

也就是不关心对象的类型，还是关注对象的行为。

### 1.2 多态

多态背后的思想是将“做什么”和“谁去做以及怎样去做”分离开来  
也就是将“不变的事物”与 “可能改变的事物”分离开来。

在书中的鸭子叫例子中就是把每个动物都会叫，把“叫”这个行为（做什么）抽象了出来，每个小动物只要实现叫的方法就可以了。每次调用不变的“叫”方法，传入不同的小动物（谁去做），输出的内容根据动物的种类不同而不同，从而实现了多态。

实现多态的方式有很多：抽象，继承  
上面这个例子就是使用抽象来实现多态

js与静态类型多态实现不同，js在运行过程中可以转换类型，而在调用方法的时候也不同做类型检查，所以不用关心类型是什么，只需要对象实现相应的方法就可以了，也就是面向接口编程。

>多态的最根本好处在于，你不必再向对象询问“你是什么类型”而后根据得到的答 案调用对象的某个行为——你只管调用该行为就是了，其他的一切多态机制都会为你安排妥当。  

换句话说，多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。



TODO:多态可以消除调用过程的分支
TODO:js是面向接口实现多态，不用关心类型

### 1.3 封装

封装：封装的目的是将信息隐藏，隐藏数据、数据类型、内部实现、内部设计等等。只要对外的接口或者调用方式没有变化，用户就不用关心它内部实现的改变。


TODO: 方法实现作用域  
TODO: let声明作用域

### 1.4 原型模式和基于原型继承的JavaScript对象系统
TODO:Object.create()
TODO:new 之后发生了什么
TODO:原型模式
TODO:原型链的关系

